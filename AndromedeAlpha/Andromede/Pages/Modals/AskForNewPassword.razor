@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject IRestorerRepository RestorerRepository
@inject IRestorerClaimRepository RestorerClaimRepository
 
@inherits OwningComponentBase

@using Tools
@using Microsoft.Extensions.Configuration
@using DatabaseConnection.RestorerModels

@if (!_formSubmitted)
{
    <EditForm Model="@_restorerAskForNewPassword" OnValidSubmit="@ResetAsked">
        <DataAnnotationsValidator/>
        <div class="form-row connexion-div top-divider">
            <div class="form-group col-sm-2"></div>
            <div class="form-group col-sm-8">
                <label for="emailAddress"><span class="oi oi-person form-icon"></span>Adresse mail</label>
                <InputText type="text" class="form-control" id="emailAddress" @bind-Value="_restorerAskForNewPassword.EmailAddress" />
                <ValidationMessage For="@(() => _restorerAskForNewPassword.EmailAddress)" />
            </div>
            <div class="form-group col-sm-2"></div>
        </div>
        <div class="centered-title bottom-divider">
            <button type="submit" class="btn btn-andromede">Envoyer</button>
        </div>
    </EditForm>
}
else
{
    <h6 class="bottom-divider">Un email a été envoyé si vous avez correctement rentré votre adresse.<br /> Vous avez 4H pour changer votre mot de passe. <br /> Vérifiez vos spams.</h6>
    <div class="centered-title bottom-divider">
        <button class="btn btn-andromede" @onclick="CloseResetPasswordModal">Fermer</button>
    </div>
}

@code {
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }

    private RestorerClaim _currentRestorerClaim;
    private RestorerAskForNewPassword _restorerAskForNewPassword;
    private Restorer _askedRestorer;

    bool _formSubmitted;

    protected override void OnInitialized()
    {
        _restorerAskForNewPassword = new RestorerAskForNewPassword();
        _askedRestorer = new Restorer();
        _currentRestorerClaim = new RestorerClaim();
        _formSubmitted = false;
    }

    async Task ResetAsked()
    {
        _formSubmitted = true;

        _askedRestorer = RestorerRepository.GetRestorerWithEmailAddress(_restorerAskForNewPassword.EmailAddress);
        if (_askedRestorer == null)
            return;
        _currentRestorerClaim = RestorerClaimGenerator.GenerateRestorerClaim(_askedRestorer.RestorerId);
        RestorerClaimRepository.NewRestorerClaim(_currentRestorerClaim);
        await ResetPasswordMailSender.SendMail(_currentRestorerClaim, _askedRestorer, Configuration.GetValue<string>("DomainName"));
    }

    async Task CloseResetPasswordModal()
    {
        await ModalInstance.CancelAsync();
    }
}
