@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@inherits OwningComponentBase
@using SendGrid;
@using SendGrid.Helpers.Mail;

@if (!_formSubmitted)
{
    @*<div class="top-row px-2 centered-title bottom-divider">
        <h6><span class="oi oi-warning form-icon"></span>Vérifiez bien les informations <span class="oi oi-warning form-icon"></span></h6>
    </div>*@
    <EditForm Model="@_askedRestorer" OnValidSubmit="@ResetAsked">
        <div class="form-row connexion-div top-divider">
            <div class="form-group col-sm-2"></div>
            <div class="form-group col-sm-8">
                <label for="emailAddress"><span class="oi oi-person form-icon"></span>Adresse mail</label>
                <InputText type="text" class="form-control" id="emailAddress" @bind-Value="_askedRestorer.EmailAddress" />
                <ValidationMessage For="@(() => _askedRestorer.EmailAddress)" />
            </div>
            <div class="form-group col-sm-2"></div>
        </div>
        <div class="centered-title bottom-divider">
            <button type="submit" class="btn btn-andromede">Envoyer</button>
        </div>
    </EditForm>
}
else
{
    <h6 class="bottom-divider">Un email a été envoyé si vous avez correctement rentré votre adresse. Vous avez 4H pour changer votre mot de passe.</h6>
    <div class="centered-title bottom-divider">
        <button class="btn btn-andromede" @onclick="CloseResetPasswordModal">Fermer</button>
    </div>
}

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    private RestorerClaim _currentRestorerClaim;
    private Restorer _askedRestorer;
    private Random _random;

    bool _formSubmitted;

    public IRestorerRepository _restorerRepository { get; set; }
    public IRestorerClaimRepository _restorerClaimRepository { get; set; }

    protected override void OnInitialized()
    {
        _restorerRepository = ScopedServices.GetRequiredService<IRestorerRepository>();
        _restorerClaimRepository = ScopedServices.GetRequiredService<IRestorerClaimRepository>();
        _askedRestorer = new Restorer();
        _currentRestorerClaim = new RestorerClaim();
        _random = new Random();
        _formSubmitted = false;
    }

    async Task ResetAsked()
    {
        _formSubmitted = true;

        _askedRestorer = _restorerRepository.GetRestorerWithEmailAddress(_askedRestorer.EmailAddress);
        if(_askedRestorer == null)
            return;
        _currentRestorerClaim.ClaimGUID = GenerateGUID();
        _currentRestorerClaim.RestorerId = _askedRestorer.RestorerId;
        _currentRestorerClaim.EndOfGUID = DateTime.Now.AddHours(4);
        _restorerClaimRepository.NewRestorerClaim(_currentRestorerClaim);
        await SendMail();
    }

    async Task CloseResetPasswordModal()
    {
        await ModalInstance.CancelAsync();
    }

    string GenerateGUID()
    {
        const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, 20)
            .Select(s => s[_random.Next(s.Length)]).ToArray());
    }

    async Task SendMail()
    {
        var anApiKey = Environment.GetEnvironmentVariable("ANDROMEDE_MAILING_SYSTEM");
        var aClient = new SendGridClient(anApiKey);
        var aFromMail = new EmailAddress("adr.clizy@outlook.fr", "Andromede Maintenance");
        var aSubject = "Reinitialisation du mot de passe";
        var aToMail = new EmailAddress(_askedRestorer.EmailAddress, _askedRestorer.RestaurantName);
        var aPlainTextContent = "";
        var aDomainName = "https://localhost:5001";
        var aNewPasswordLink = aDomainName + $"/RestorerManagment/NewPassword/{_currentRestorerClaim.ClaimGUID}";
        var aHtmlContent =
                "<strong>Vous avez fait une demande de réinitialisation de mot de passe</strong>" +
                "<h5>Veuillez cliquer sur ce lien afin de réinitialiser votre mot de passe : </h6>" +
                $"<a href='{aNewPasswordLink}'>{aNewPasswordLink}</a>";
        var aMessage = MailHelper.CreateSingleEmail(aFromMail, aToMail, aSubject, aPlainTextContent, aHtmlContent);
        var aResponse = await aClient.SendEmailAsync(aMessage);
    }
}
