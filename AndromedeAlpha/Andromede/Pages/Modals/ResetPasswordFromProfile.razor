@*
    *
    * (c) 2021 Copyright Andromede
    * Unauthorized use and disclosure strictly forbidden
    *
*@

@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@inherits OwningComponentBase
@using Tools

@if (!_isFormSubmitted)
{
    <div class="row">
        <div class="col-2"></div>
        <div class="col-5">
            <button class="btn btn-andromede" @onclick="ResetPassword">Confirmer</button>
        </div>
        <div class="col-3">
            <button class="btn btn-andromede" @onclick="CloseResetPasswordFromProfileModal">Annuler</button>
        </div>
        <div class="col-2"></div>
    </div>
}
else
{
    <h6 class="bottom-divider">Un email a été envoyé si vous avez correctement rentré votre adresse.<br /> Vous avez 4H pour changer votre mot de passe. <br /> Vérifiez également vos spams.</h6>
    <div class="centered-title bottom-divider">
        <button class="btn btn-andromede" @onclick="CloseResetPasswordFromProfileModal">Fermer</button>
    </div>
}

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public int RestorerId { get; set; }

    private Restorer _currentRestorer;
    private RestorerClaim _currentRestorerClaim;

    private bool _isFormSubmitted;

    public IRestorerRepository _restorerRepository { get; set; }
    public IRestorerClaimRepository _restorerClaimRepository { get; set; }

    protected override void OnInitialized()
    {
        _restorerRepository = ScopedServices.GetRequiredService<IRestorerRepository>();
        _restorerClaimRepository = ScopedServices.GetRequiredService<IRestorerClaimRepository>();
        _currentRestorer = _restorerRepository.GetRestorerWithId(RestorerId);
        _isFormSubmitted = false;
    }

    async Task ResetPassword()
    {
        _isFormSubmitted = true;
        if (_currentRestorer == null)
        {
            await ModalInstance.CancelAsync();
            return;
        }

        _currentRestorerClaim = RestorerClaimGenerator.GenerateRestorerClaim(_currentRestorer.RestorerId);
        _restorerClaimRepository.NewRestorerClaim(_currentRestorerClaim);
        await ResetPasswordMailSender.SendMail(_currentRestorerClaim, _currentRestorer);
    }

    async Task CloseResetPasswordFromProfileModal()
    {
        await ModalInstance.CancelAsync();
    }
}
