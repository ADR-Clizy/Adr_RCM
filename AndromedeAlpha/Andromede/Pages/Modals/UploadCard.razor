@*
    *
    * (c) 2021-2021 Copyright Andromede
    * Unauthorized use and disclosure strictly forbidden
    *
*@
@using Andromede.Pages.Tools

@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@inject ICardRepository CardRepository
@inject IPdfFileManager FileManager

@inherits OwningComponentBase

<AuthorizeView>
    <Authorized Context="_authContext">
        @if (Restorer != null)
        {
            <div class="top-row px-2 centered-title">
                <img class="small centered-image bottom-divider to-hide-for-mobile" src="img/andromede_white_bg.png" />
                <h6 class="to-hide-for-mobile">Veuillez sélectionner une carte afin de générer la numérisation</h6>
                <h6 class="bottom-divider">Format accepté</h6>
                <img class="accepted-format-image centered-image" src="img/ico/pdf.png" />
            </div>
            <EditForm Model="@_restorerCard" OnValidSubmit="@CardAdded">
                <div class="form-row connexion-div top-divider">
                    <div class="form-group col-sm-2"></div>
                    <div class="form-group col-sm-8">
                        <label for="cardName"><span class="oi oi-clipboard form-icon"></span>Nom de la carte</label>
                        <InputText type="text" class="form-control" id="cardName" placeholder="Carte du jour" @bind-Value="_restorerCard.CardName" />
                        <h6 style="color:red" class="top-divider">@_cardInfos</h6>
                    </div>
                    <div class="form-group col-sm-2"></div>
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-1"></div>
                    <div class="form-group col-sm-10">
                        <div class="drag-drop-zone">
                            <BlazorInputFile.InputFile OnChange="ViewFileAndCardName" accept="application/pdf" />
                            Glissez un fichier ou cliquez pour déposer une fichier
                        </div>
                    </div>
                    <div class="form-group col-sm-1"></div>
                </div>


                <div class="centered-title top-divider bottom-divider">
                    <h6>@_fileInfos</h6>
                    <h6 style="color:red">@_fileError</h6>
                    <h6 style="color:green">@_fileValidation</h6>
                    @if (_isFileCorrect)
                    {
                        <button type="submit" class="btn btn-andromede top-divider">Ajouter la carte</button>
                    }
                    @if (_isLoading)
                    {
                        <div class="spinner-border text-andromede" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        <Andromede.Pages.NotAuthorizedViewer />
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public Restorer Restorer { get; set; }

    private const int MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
    private const int MAX_FILE_SIZE_MB = 10;

    private string _fileInfos;
    private string _fileValidation;
    private string _fileError;
    private string _cardInfos;


    private bool _isFileCorrect;
    private bool _isLoading;

    private IFileListEntry _fileToUpload;

    private Card _restorerCard;

    private List<string> acceptedFileTypes;

    protected override void OnInitialized()
    {
        acceptedFileTypes = new List<string>() { "application/pdf" };
        _isLoading = false;
        _restorerCard = new Card();
        _restorerCard.CardName = "";
    }

    void ViewFileAndCardName(IFileListEntry[] files)
    {
        _isLoading = true;
        _fileInfos = "";
        _fileToUpload = files.FirstOrDefault();
        if (_fileToUpload == null)
        {
            return;
        }
        else if (_fileToUpload.Size > MAX_FILE_SIZE)
        {
            _fileError = $"Le fichier est trop gros. La taille maximale est : {MAX_FILE_SIZE_MB} MB.";
            _isFileCorrect = false;
        }
        else if (!acceptedFileTypes.Contains(_fileToUpload.Type))
        {
            _fileError = "Seuls les fichiers de type PDF sont acceptés";
            _isFileCorrect = false;
        }
        else
        {
            _fileInfos = _fileToUpload.Name;
            _isFileCorrect = true;
        }
        _isLoading = false;
    }

    async Task CardAdded()
    {
        string aRestaurantSiretNumber = Restorer.RestaurantSiretNumber;
        if (_restorerCard.CardName.Length != 0 && _restorerCard.CardName.Length < 40)
        {
            _isLoading = true;
            _isFileCorrect = false;
            _cardInfos = "";
            try
            {
                _fileInfos = "";
                _restorerCard.RestorerId = Restorer.RestorerId;
                _restorerCard = CardRepository.NewCard(_restorerCard);
                using Stream aFileToUploadStream = _fileToUpload.Data;
                string aFileName = _restorerCard.CardId.ToString() + ".pdf";
                await FileManager.UploadCard(aFileName, aFileToUploadStream);
                //var aFileToUploadPath = $"wwwroot/Customer/Cards/{_restorerCard.CardId}.pdf";
                //using FileStream aFileStream = File.Create(aFileToUploadPath);
                //await aFileToUploadStream.CopyToAsync(aFileStream);
            }
            catch
            {
                _fileError = "Une erreur est survenue, nous sommes désolé pour la gêne occasionnée, veuillez réessayer l'opération.";
            }
            _fileValidation = "La carte a été correctement ajoutée au serveur Andromede.\n";
            NavManager.NavigateTo($"/CardManagment/Restorer/Cards/{Restorer.RestorerId}", forceLoad: true);
            _isLoading = false;
        }
        else
        {

            _cardInfos = "Veuillez entrer un nom valide (moins de 40 caractères).\n";
        }


    }
}
