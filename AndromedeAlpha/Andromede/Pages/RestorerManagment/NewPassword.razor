@*
    *
    * (c) 2021 Copyright Andromede
    * Unauthorized use and disclosure strictly forbidden
    *
*@

@page "/RestorerManagment/NewPassword/{ClaimGUID}"

@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal
@inject IRestorerRepository RestorerRepository
@inject IRestorerClaimRepository RestorerClaimRepository

@inherits OwningComponentBase

@using DatabaseConnection.RestorerModels

@if (_currentRestorerClaim != null)
{
    <div class="top-row px-2 centered-title ">
        <img class="small centered-image bottom-divider" src="img/andromede_white_bg.png" />
        @if (IsGUIDEnded())
        {
            <div class="row">
                <div class="col-12">
                    <h3 class="bottom-divider">Le délai d'attente est dépassée, veuillez faire une autre demande</h3>
                </div>
            </div>
            <img class="bottom-divider" src="img/ico/forbidden.png" width="400" />
            <div class="row">
                <div class="col-5"></div>
                <div class="col-2">
                    <a href="/RestorerManagment/Login" class="btn btn-andromede bottom-divider">Connexion</a>
                </div>
                <div class="col-5"></div>
            </div>
        }
        else
        {
            <h6>Veuillez rentrer votre nouveau mot de passe</h6>
            <EditForm Model="@_restorerNewPassword" OnValidSubmit="@UpdateRestorerPassword" id="connexion-form">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-sm-10">
                        <label for="restorerPassword"><span class="oi oi-key form-icon"></span>Mot de passe</label>
                        <InputText type="@_passwordInputType" class="form-control" id="restorerPassword" @bind-Value="_restorerNewPassword.Password" />
                        <ValidationMessage For="@(() => _restorerNewPassword.Password)" />
                    </div>
                    <div class="form-group col-sm-2">
                        <img class="password-eye-newpassword" src="img/ico/password_eye.png" @onclick="ShowPassword" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-10">
                        <label for="restorerConfirmationPassword"><span class="oi oi-key form-icon"></span>Confirmer le mot de passe</label>
                        <InputText type="@_confirmationPasswordInputType" class="form-control" id="restorerConfirmationPassword" @bind-Value="_restorerNewPassword.PasswordConfirmed" />
                        <ValidationMessage For="@(() => _restorerNewPassword.PasswordConfirmed)" />
                        <small id="missMatchedPasswords" class="form-alert form-text">@_missMatchedPasswords</small>
                    </div>
                    <div class="form-group col-sm-2">
                        <img class="password-eye-newpassword" src="img/ico/password_eye.png" @onclick="ShowConfirmationPassword" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-10">
                        <button type="submit" class="btn btn-andromede connexion-div">Valider</button>
                        @if (_isLoading)
                        {
                            <div class="spinner-border text-andromede" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        }
                    </div>
                    <div class="col-sm-2"></div>
                </div>
            </EditForm>
        }
    </div>
}
else
{
    if (_isPasswordChanged)
    {
        <div class="top-row centered-title">
            <div class="row bottom-divider">
                <div class="col-sm-12">
                    <img class="small centered-image bottom-divider" src="img/andromede_white_bg.png" />
                </div>
            </div>
            <div class="row bottom-divider">
                <div class="col-sm-12">
                    <img class="centered-image bottom-divider top-divider" src="img/ico/happy_boy.png" width="250" />
                </div>
            </div>
            <div class="row bottom-divider">
                <div class="col-sm-12">
                    <h3>Votre mot de passe a été correctement modifié</h3>
                </div>
            </div>
            <div class="row bottom-divider">
                <div class="col-sm-3"></div>
                <div class="col-sm-6">
                    <button class="btn btn-andromede" @onclick="NavigateToLogin">Connexion</button>
                </div>
                <div class="col-sm-3"></div>
            </div>
        </div>
    }
    else
    {
        <NotAuthorizedViewer />
    }

}

@code {
    [Parameter]
    public string ClaimGUID { get; set; }

    private RestorerNewPassword _restorerNewPassword;
    private Restorer _restorerToModify;
    private RestorerClaim _currentRestorerClaim;

    bool _isLoading;
    bool _isPasswordChanged;

    string _passwordInputType;
    string _confirmationPasswordInputType;
    string _missMatchedPasswords;
    string _hashedPassword;

    protected override void OnInitialized()
    {
        ((AndromedeAuthenticationStateProvider)AuthenticationStateProvider).RestorerIsLoggedOut();
        _restorerNewPassword = new RestorerNewPassword();
        _currentRestorerClaim = RestorerClaimRepository.GetRestorerClaimWithGUID(ClaimGUID);
        if (_currentRestorerClaim != null)
        {
            _restorerToModify = RestorerRepository.GetRestorerWithId(_currentRestorerClaim.RestorerId);
        }
        _isLoading = false;
        _isPasswordChanged = false;
        _passwordInputType = "password";
        _confirmationPasswordInputType = "password";
    }


    bool IsGUIDEnded()
    {
        return DateTime.Compare(_currentRestorerClaim.EndOfGUID, DateTime.Now) < 0;
    }

    void UpdateRestorerPassword()
    {
        _missMatchedPasswords = "";
        if (!IsPasswordConfirmed())
        {
            _missMatchedPasswords = "Les mots de passe ne correspondent pas";
        }
        else
        {
            _isPasswordChanged = true;
            _restorerToModify.Password = _hashedPassword;
            _restorerToModify = RestorerRepository.UpdateProfile(_restorerToModify);
            RestorerClaimRepository.DeleteRestorerClaim(_currentRestorerClaim.RestorerClaimId);
            _currentRestorerClaim = null;
        }

    }

    void NavigateToLogin()
    {
        NavManager.NavigateTo("/RestorerManagment/Login", forceLoad: true);
    }

    bool IsPasswordConfirmed()
    {
        _hashedPassword = BCryptNet.HashPassword(_restorerNewPassword.Password);
        return BCryptNet.Verify(_restorerNewPassword.PasswordConfirmed, _hashedPassword);
    }

    void ShowPassword()
    {
        if (_passwordInputType == "password")
            _passwordInputType = "text";
        else
            _passwordInputType = "password";
    }

    void ShowConfirmationPassword()
    {
        if (_confirmationPasswordInputType == "password")
            _confirmationPasswordInputType = "text";
        else
            _confirmationPasswordInputType = "password";
    }
}
